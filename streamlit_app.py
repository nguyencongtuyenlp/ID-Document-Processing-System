import streamlit as st
import cv2
import numpy as np
import os
import tempfile
from PIL import Image
import base64
from src.image_processing import preprocess_image, extract_roi, scan_document1
from src.text_extraction import extract_text_from_roi
from src.mrz_parser import parse_mrz
from src.data_normalization import correct_place_of_birth, compare_names
from src.config import CCCD_ROIS, ROIS, MRZ_ROI, DOCUMENT_TYPES

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="üìÑ Passport Reader",
    page_icon="üÜî",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .success-card {
        background: #f0fdf4;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid #10b981;
        margin: 1rem 0;
    }
    
    .error-card {
        background: #fef2f2;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid #dc2626;
        margin: 1rem 0;
    }
    
    .stButton > button {
        background: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.5rem 1rem;
        font-weight: 600;
    }
</style>
""", unsafe_allow_html=True)

def detect_document_type(image):
    """Ph√°t hi·ªán lo·∫°i t√†i li·ªáu: CCCD ho·∫∑c Passport"""
    try:
        text = extract_text_from_roi(image)
        if "CƒÇN C∆Ø·ªöC C√îNG D√ÇN" in text.upper():
            return "CCCD"
        
        # Th·ª≠ parse MRZ ƒë·ªÉ ph√°t hi·ªán Passport
        try:
            parse_mrz(image, MRZ_ROI)
            return "PASSPORT"
        except:
            return "CCCD"  # M·∫∑c ƒë·ªãnh l√† CCCD
    except:
        return "CCCD"

def process_document(image, doc_type):
    """X·ª≠ l√Ω t√†i li·ªáu v√† tr√≠ch xu·∫•t th√¥ng tin"""
    try:
        # L·∫•y template v√† cƒÉn ch·ªânh ·∫£nh
        template_path = "template/CCCD.png" if doc_type == "CCCD" else "template/ho_chieu.jpg"
        form = cv2.imread(template_path)
        
        aligned_image = image
        if form is not None:
            try:
                aligned_image = scan_document1(form, image)
            except Exception as e:
                st.warning(f"Kh√¥ng th·ªÉ cƒÉn ch·ªânh ·∫£nh: {e}")
        
        # L·∫•y c·∫•u h√¨nh ROI
        rois = DOCUMENT_TYPES[doc_type]["rois"]
        has_mrz = DOCUMENT_TYPES[doc_type]["has_mrz"]
        
        # Tr√≠ch xu·∫•t th√¥ng tin
        info = {}
        
        # X·ª≠ l√Ω MRZ cho h·ªô chi·∫øu
        if has_mrz:
            try:
                mrz_info = parse_mrz(aligned_image, MRZ_ROI)
                info.update(mrz_info)
            except Exception as e:
                st.warning(f"Kh√¥ng th·ªÉ ƒë·ªçc MRZ: {e}")
        
        # Tr√≠ch xu·∫•t th√¥ng tin t·ª´ c√°c ROI
        roi_images = []
        for i, roi in enumerate(rois, 1):
            try:
                roi_image = extract_roi(aligned_image, roi)
                roi_images.append(roi_image)
                extracted_text = extract_text_from_roi(roi_image)
                
                if extracted_text:
                    if doc_type == "CCCD":
                        if i == 1:
                            info['H·ªç v√† t√™n'] = extracted_text
                        elif i == 2:
                            info['Ng√†y sinh'] = extracted_text
                        elif i == 3:
                            info['N∆°i th∆∞·ªùng tr√∫'] = extracted_text
                        elif i == 4:
                            info['N∆°i ƒëƒÉng k√Ω th∆∞·ªùng tr√∫'] = extracted_text
                    elif doc_type == "PASSPORT":
                        if i == 1 and compare_names(info.get('T√™n (ti·∫øng Anh)', '').strip(), extracted_text.strip()):
                            info['T√™n (ti·∫øng Anh)'] = extracted_text.strip()
                        elif i == 2:
                            corrected_text = correct_place_of_birth(extracted_text)
                            info['N∆°i sinh'] = corrected_text
                        elif i == 3:
                            info['N∆°i c·∫•p'] = extracted_text
                        elif i == 4 and compare_names(info.get('T√™n (ti·∫øng Anh)', '').strip(), extracted_text.strip()):
                            info['T√™n (ti·∫øng Anh)'] = extracted_text.strip()
            except Exception as e:
                st.warning(f"L·ªói x·ª≠ l√Ω ROI {i}: {e}")
                roi_images.append(None)
        
        return info, aligned_image, roi_images
        
    except Exception as e:
        st.error(f"L·ªói x·ª≠ l√Ω t√†i li·ªáu: {e}")
        return {}, image, []

def main():
    # Header
    st.markdown("""
    <div class="main-header">
        <h1>üìÑ Passport Reader</h1>
        <p>ƒê·ªçc th√¥ng tin t·ª´ H·ªô chi·∫øu v√† CCCD m·ªôt c√°ch th√¥ng minh</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar
    with st.sidebar:
        st.markdown("## ‚öôÔ∏è C√†i ƒë·∫∑t")
        
        # Ch·ªçn lo·∫°i t√†i li·ªáu
        doc_type = st.selectbox(
            "Lo·∫°i t√†i li·ªáu",
            ["T·ª± ƒë·ªông ph√°t hi·ªán", "CCCD", "H·ªô chi·∫øu"],
            help="Ch·ªçn lo·∫°i t√†i li·ªáu ho·∫∑c ƒë·ªÉ t·ª± ƒë·ªông ph√°t hi·ªán"
        )
        
        st.markdown("---")
        st.markdown("### üìä Th·ªëng k√™")
        if 'processed_count' not in st.session_state:
            st.session_state.processed_count = 0
        st.metric("ƒê√£ x·ª≠ l√Ω", st.session_state.processed_count)
        
        st.markdown("---")
        st.markdown("### ‚ÑπÔ∏è H∆∞·ªõng d·∫´n")
        st.markdown("""
        1. **T·∫£i l√™n ·∫£nh** t·ª´ m√°y t√≠nh ho·∫∑c ch·ª•p t·ª´ camera
        2. **Ch·ªçn lo·∫°i t√†i li·ªáu** ho·∫∑c ƒë·ªÉ t·ª± ƒë·ªông ph√°t hi·ªán
        3. **Xem k·∫øt qu·∫£** tr√≠ch xu·∫•t th√¥ng tin
        4. **T·∫£i xu·ªëng** ·∫£nh ƒë√£ x·ª≠ l√Ω n·∫øu c·∫ßn
        """)
    
    # Main content
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown("### üì§ T·∫£i l√™n ·∫£nh")
        
        # Upload methods
        upload_method = st.radio(
            "Ch·ªçn ph∆∞∆°ng th·ª©c:",
            ["T·ª´ m√°y t√≠nh", "Ch·ª•p t·ª´ camera"],
            horizontal=True
        )
        
        uploaded_file = None
        
        if upload_method == "T·ª´ m√°y t√≠nh":
            uploaded_file = st.file_uploader(
                "Ch·ªçn file ·∫£nh",
                type=['jpg', 'jpeg', 'png'],
                help="H·ªó tr·ª£ ƒë·ªãnh d·∫°ng JPG, PNG, JPEG"
            )
        else:
            # Camera input - ƒê∆°n gi·∫£n h√≥a
            camera_file = st.camera_input("Ch·ª•p ·∫£nh t√†i li·ªáu")
            if camera_file:
                uploaded_file = camera_file
        
        # Process button
        process_btn = st.button("üöÄ X·ª≠ l√Ω t√†i li·ªáu", type="primary", use_container_width=True)
    
    with col2:
        st.markdown("### üìã K·∫øt qu·∫£")
        
        if uploaded_file is not None and process_btn:
            # Chuy·ªÉn ƒë·ªïi file th√†nh OpenCV image
            file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
            image = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
            
            if image is not None:
                # Ph√°t hi·ªán lo·∫°i t√†i li·ªáu
                if doc_type == "T·ª± ƒë·ªông ph√°t hi·ªán":
                    detected_type = detect_document_type(image)
                    st.success(f"üéØ ƒê√£ ph√°t hi·ªán: **{detected_type}**")
                else:
                    detected_type = doc_type
                
                # X·ª≠ l√Ω t√†i li·ªáu
                with st.spinner("ƒêang x·ª≠ l√Ω t√†i li·ªáu..."):
                    info, aligned_image, roi_images = process_document(image, detected_type)
                
                if info:
                    st.session_state.processed_count += 1
                    
                    # Hi·ªÉn th·ªã th√¥ng tin
                    st.markdown(f"""
                    <div class="success-card">
                        <h4>‚úÖ ƒê√£ tr√≠ch xu·∫•t th√†nh c√¥ng {len(info)} th√¥ng tin</h4>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # Hi·ªÉn th·ªã th√¥ng tin d·∫°ng metrics
                    for key, value in info.items():
                        st.metric(key, value or "N/A")
                    
                    # Hi·ªÉn th·ªã ·∫£nh ƒë√£ x·ª≠ l√Ω
                    st.markdown("### üñºÔ∏è ·∫¢nh ƒë√£ x·ª≠ l√Ω")
                    
                    # ·∫¢nh g·ªëc v√† ƒë√£ cƒÉn ch·ªânh
                    col_img1, col_img2 = st.columns(2)
                    
                    with col_img1:
                        st.image(image, caption="·∫¢nh g·ªëc", use_container_width=True)
                    
                    with col_img2:
                        st.image(aligned_image, caption="·∫¢nh ƒë√£ cƒÉn ch·ªânh", use_container_width=True)
                    
                    # C√°c v√πng ROI
                    if roi_images:
                        st.markdown("### üéØ C√°c v√πng th√¥ng tin")
                        roi_cols = st.columns(2)
                        
                        for i, roi_img in enumerate(roi_images):
                            if roi_img is not None:
                                with roi_cols[i % 2]:
                                    st.image(roi_img, caption=f"V√πng {i+1}", use_container_width=True)
                    
                    # T·∫£i xu·ªëng ·∫£nh
                    st.markdown("### üíæ T·∫£i xu·ªëng")
                    
                    # Chuy·ªÉn ƒë·ªïi ·∫£nh th√†nh bytes ƒë·ªÉ t·∫£i xu·ªëng
                    _, buffer = cv2.imencode('.jpg', aligned_image)
                    img_bytes = buffer.tobytes()
                    
                    st.download_button(
                        label="üì• T·∫£i xu·ªëng ·∫£nh ƒë√£ x·ª≠ l√Ω",
                        data=img_bytes,
                        file_name=f"processed_{detected_type.lower()}.jpg",
                        mime="image/jpeg"
                    )
                    
                    # Hi·ªÉn th·ªã JSON k·∫øt qu·∫£
                    with st.expander("üìÑ Xem d·ªØ li·ªáu JSON"):
                        st.json(info)
                
                else:
                    st.markdown("""
                    <div class="error-card">
                        <h4>‚ùå Kh√¥ng th·ªÉ tr√≠ch xu·∫•t th√¥ng tin</h4>
                        <p>Vui l√≤ng th·ª≠ l·∫°i v·ªõi ·∫£nh r√µ n√©t h∆°n ho·∫∑c ki·ªÉm tra lo·∫°i t√†i li·ªáu.</p>
                    </div>
                    """, unsafe_allow_html=True)
            else:
                st.error("Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i!")
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #6b7280; padding: 2rem;">
        <p>üìÑ Passport Reader - ƒê∆∞·ª£c ph√°t tri·ªÉn v·ªõi ‚ù§Ô∏è b·∫±ng Python & Streamlit</p>
        <p>H·ªó tr·ª£: H·ªô chi·∫øu Vi·ªát Nam, CCCD m·ªõi</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()