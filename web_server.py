from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, FileResponse
from fastapi.staticfiles import StaticFiles
import cv2
import numpy as np
import os
import base64
import json
from PIL import Image
import io
from src.image_processing import preprocess_image, extract_roi, scan_document1
from src.text_extraction import extract_text_from_roi
from src.mrz_parser import parse_mrz
from src.data_normalization import correct_place_of_birth, compare_names
from src.config import CCCD_ROIS, ROIS, MRZ_ROI, DOCUMENT_TYPES

# T·∫°o app ch√≠nh
app = FastAPI(
    title="Passport Reader Web App",
    description="Web app ƒë·ªÉ ƒë·ªçc th√¥ng tin t·ª´ H·ªô chi·∫øu v√† CCCD",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# T·∫°o th∆∞ m·ª•c static n·∫øu ch∆∞a c√≥
os.makedirs("static", exist_ok=True)

# Mount static files
app.mount("/static", StaticFiles(directory="static"), name="static")

def detect_document_type(image):
    """Ph√°t hi·ªán lo·∫°i t√†i li·ªáu: CCCD ho·∫∑c Passport"""
    try:
        text = extract_text_from_roi(image)
        if "CƒÇN C∆Ø·ªöC C√îNG D√ÇN" in text.upper():
            return "CCCD"
        
        # Th·ª≠ parse MRZ ƒë·ªÉ ph√°t hi·ªán Passport
        try:
            parse_mrz(image, MRZ_ROI)
            return "PASSPORT"
        except:
            return "CCCD"  # M·∫∑c ƒë·ªãnh l√† CCCD
    except:
        return "CCCD"

def process_image_file(file_content):
    """X·ª≠ l√Ω file ·∫£nh t·ª´ upload"""
    try:
        # Chuy·ªÉn ƒë·ªïi bytes th√†nh numpy array
        nparr = np.frombuffer(file_content, np.uint8)
        image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        
        if image is None:
            raise ValueError("Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh")
        
        return image
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"L·ªói x·ª≠ l√Ω ·∫£nh: {str(e)}")

def save_processed_images(image, doc_type, rois):
    """L∆∞u c√°c ·∫£nh ƒë√£ x·ª≠ l√Ω"""
    saved_files = {}
    
    # L∆∞u ·∫£nh g·ªëc
    cv2.imwrite("static/original.jpg", image)
    saved_files["original"] = "static/original.jpg"
    
    # L∆∞u ·∫£nh ƒë√£ x·ª≠ l√Ω
    preprocessed = preprocess_image(image)
    cv2.imwrite("static/processed.jpg", preprocessed)
    saved_files["processed"] = "static/processed.jpg"
    
    # L∆∞u c√°c ROI
    for i, roi in enumerate(rois, 1):
        roi_image = extract_roi(image, roi)
        roi_path = f"static/roi_{i}.jpg"
        cv2.imwrite(roi_path, roi_image)
        saved_files[f"roi_{i}"] = roi_path
    
    return saved_files

# Serve frontend
@app.get("/")
async def read_index():
    return FileResponse("templates/index.html")

@app.get("/health")
async def health():
    return {"status": "OK", "message": "Web app is running"}

@app.post("/api/process-document")
async def process_document(file: UploadFile = File(...)):
    """X·ª≠ l√Ω ·∫£nh passport/CCCD v√† tr·∫£ v·ªÅ th√¥ng tin"""
    try:
        # ƒê·ªçc file ·∫£nh
        file_content = await file.read()
        image = process_image_file(file_content)
        
        # Ph√°t hi·ªán lo·∫°i t√†i li·ªáu
        doc_type = detect_document_type(image)
        
        # L·∫•y template v√† cƒÉn ch·ªânh ·∫£nh
        template_path = "template/CCCD.png" if doc_type == "CCCD" else "template/ho_chieu.jpg"
        form = cv2.imread(template_path)
        
        if form is not None:
            try:
                image = scan_document1(form, image)
                cv2.imwrite("static/aligned.jpg", image)
            except Exception as e:
                print(f"C·∫£nh b√°o: Kh√¥ng th·ªÉ cƒÉn ch·ªânh ·∫£nh: {e}")
        
        # L·∫•y c·∫•u h√¨nh ROI
        rois = DOCUMENT_TYPES[doc_type]["rois"]
        has_mrz = DOCUMENT_TYPES[doc_type]["has_mrz"]
        
        # L∆∞u c√°c ·∫£nh ƒë√£ x·ª≠ l√Ω
        saved_files = save_processed_images(image, doc_type, rois)
        
        # Tr√≠ch xu·∫•t th√¥ng tin
        info = {}
        
        # X·ª≠ l√Ω MRZ cho h·ªô chi·∫øu
        if has_mrz:
            try:
                mrz_info = parse_mrz(image, MRZ_ROI)
                info.update(mrz_info)
            except Exception as e:
                print(f"C·∫£nh b√°o: Kh√¥ng th·ªÉ ƒë·ªçc MRZ: {e}")
        
        # Tr√≠ch xu·∫•t th√¥ng tin t·ª´ c√°c ROI
        for i, roi in enumerate(rois, 1):
            try:
                roi_image = extract_roi(image, roi)
                extracted_text = extract_text_from_roi(roi_image)
                
                if extracted_text:
                    if doc_type == "CCCD":
                        if i == 1:
                            info['H·ªç v√† t√™n'] = extracted_text
                        elif i == 2:
                            info['Ng√†y sinh'] = extracted_text
                        elif i == 3:
                            info['N∆°i th∆∞·ªùng tr√∫'] = extracted_text
                        elif i == 4:
                            info['N∆°i ƒëƒÉng k√Ω th∆∞·ªùng tr√∫'] = extracted_text
                    elif doc_type == "PASSPORT":
                        if i == 1 and compare_names(info.get('T√™n (ti·∫øng Anh)', '').strip(), extracted_text.strip()):
                            info['T√™n (ti·∫øng Anh)'] = extracted_text.strip()
                        elif i == 2:
                            corrected_text = correct_place_of_birth(extracted_text)
                            info['N∆°i sinh'] = corrected_text
                        elif i == 3:
                            info['N∆°i c·∫•p'] = extracted_text
                        elif i == 4 and compare_names(info.get('T√™n (ti·∫øng Anh)', '').strip(), extracted_text.strip()):
                            info['T√™n (ti·∫øng Anh)'] = extracted_text.strip()
            except Exception as e:
                print(f"C·∫£nh b√°o: L·ªói x·ª≠ l√Ω ROI {i}: {e}")
        
        return {
            "success": True,
            "document_type": doc_type,
            "extracted_info": info,
            "processed_images": saved_files,
            "message": f"ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng {doc_type}"
        }
        
    except Exception as e:
        return JSONResponse(
            status_code=500,
            content={
                "success": False,
                "error": str(e),
                "message": "L·ªói x·ª≠ l√Ω t√†i li·ªáu"
            }
        )

@app.get("/api/images/{filename}")
async def get_image(filename: str):
    """L·∫•y ·∫£nh ƒë√£ x·ª≠ l√Ω"""
    file_path = f"static/{filename}"
    if os.path.exists(file_path):
        return FileResponse(file_path)
    else:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y ·∫£nh")

@app.get("/api/health")
async def api_health():
    """Ki·ªÉm tra s·ª©c kh·ªèe API"""
    return {
        "status": "healthy",
        "message": "API ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng",
        "version": "1.0.0"
    }

if __name__ == "__main__":
    import uvicorn
    print("üöÄ Starting Passport Reader Web Server...")
    print("üì± Web App: http://localhost:8080")
    print("üîå API Docs: http://localhost:8080/api/docs")
    print("‚ù§Ô∏è Health Check: http://localhost:8080/health")
    uvicorn.run(app, host="127.0.0.1", port=8080)
